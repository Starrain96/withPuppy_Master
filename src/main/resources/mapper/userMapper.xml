<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user">
	<!-- insert, delete, update는 무조건 resultType="int"이므로
	     프로그래머가 써주지 않아도 이미 resultType="int"가 
	     있는 것으로 본다.!
	 -->
	<insert id="insertUser" parameterType="userVO">
		insert into user (user_id, user_pw, user_name, user_email, user_tel, user_nickname, user_addr1, user_addr2, user_addr3, user_addr4, user_addr5, user_interest, user_img, user_level, user_state, user_joindate, user_visit)
		values (#{user_id}, #{user_pw}, #{user_name}, #{user_email}, #{user_tel}, #{user_nickname}, #{user_addr1}, #{user_addr2}, #{user_addr3}, #{user_addr4}, #{user_addr5}, #{user_interest}, "profile.png", "집사", 1, now(), 0)
	</insert>
	
	<select id="idCheck" parameterType="String" resultType="int">
		select COUNT(*)
		  from user
		 where user_id = #{user_id} 
	</select>
	
	<select id="nicknameCheck" parameterType="String" resultType="int">
		select COUNT(*)
		  from user
		 where user_nickname = #{user_nickname}
	</select>
	
	<select id="loginUser" parameterType="Map" resultType="userVO">
		select *
		  from user
		 where user_id = #{id} and user_pw = #{pw} and user_state = 1
	</select>
	
	<update id="recentvisitUser" parameterType="String">
		update user
		  set user_recentvisit = now()
		 where user_id = #{id}
	</update>
	
	<update id="visitUser" parameterType="String">
		update user
		   set user_visit = user_visit + 1
		 where user_id = #{id}
		   and user_recentvisit != DATE(now())
	</update>
	
	<update id="updateLevel">
	<![CDATA[
		UPDATE user
		   SET user_level = 
		    CASE 
		        WHEN user_commu >= 100 AND user_reply >= 100 AND user_visit >= 30 THEN '인플루언서'
		        WHEN user_commu >= 50 AND user_reply >= 50 AND user_visit >= 10 THEN '프로집사'
		        WHEN user_commu >= 10 AND user_reply >= 10 AND user_visit >= 5 THEN '훈련사'
		        ELSE '집사'
		    END
		 WHERE user_level <> '관리자' AND DATE(user_recentvisit) = CURDATE() - INTERVAL 1 DAY;
	]]>
	</update>
	
	<select id="pwCheck" resultType="String">
		select user_pw
		  from user
		 where user_id = #{user_id}
	</select>
	
	<update id="deleteUser">
		update user set user_state = 0 where user_id = #{user_id}
	</update>
	
	<update id="updateUser" parameterType="userVO">
		update user set user_tel = #{user_tel}, user_nickname =  #{user_nickname},
		user_addr1 = #{user_addr1}, user_addr2 = #{user_addr2}, user_addr3 = #{user_addr3}, user_addr4 = #{user_addr4}, user_addr5 = #{user_addr5} <if test="user_img!=null">, user_img = #{user_img}</if> where user_id = #{user_id}
	</update>
	
	<update id="updatePw" parameterType="Map">
		update user
		   set user_pw = #{password}
		 where user_id = #{id}
	</update>
	
	<select id="userCommuList" parameterType="String" resultType="usercommuVO">
		select c.commu_no, c.commu_title, c.commu_view, c.commu_date, 
				(select count(*) from reply r where r.commu_no = c.commu_no) commu_reply
		  from communities c 
		 where commu_id = #{id}
	  order by commu_date desc;
	</select>
	
	<select id="userShoppingList" parameterType="String" resultType="usershoppingVO">
		select *
		  from order1
		where user_id = #{id}
		order by order_date desc
	</select>
	
	<select id="userShoppingProductList" parameterType="String" resultType="usershoppingproductVO">
		select od.order_id, od.ordered_cnt, p.product_name, p.product_img, p.product_price
		  from order1 o
	inner join order_detail od ON o.order_id = od.order_id
	inner join product p ON od.product_id = p.product_id
		 where o.user_id = #{id}
	  order by o.order_date desc
	</select>
	
	<select id="userReviewList" parameterType="String" resultType="userreviewVO">
		select s.service_id, s.date, s.content, s.kind, s.explain, s.treat, s.facilities, s.price,
				(select p.service_name from petservice p where p.service_id = s.service_id) service_name
		  from star s
		 where s.id = #{id}
	  order by s.date desc
	</select>
	
	<select id="all"  resultType="userVO">
		select * from user
	</select>
</mapper>



